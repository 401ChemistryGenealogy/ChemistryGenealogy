{
    "project": {},
    "files": {
        "editController.js": {
            "name": "editController.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "personAutoController.js": {
            "name": "personAutoController.js",
            "modules": {
                "personAutoController": 1
            },
            "classes": {
                "personAutoController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "searchController.js": {
            "name": "searchController.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "submitController.js": {
            "name": "submitController.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "userDialogController.js": {
            "name": "userDialogController.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "personAutoController": {
            "name": "personAutoController",
            "submodules": {},
            "elements": {},
            "classes": {
                "personAutoController": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "personAutoController.js",
            "line": 1
        }
    },
    "classes": {
        "personAutoController": {
            "name": "personAutoController",
            "shortname": "personAutoController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "personAutoController",
            "namespace": "",
            "file": "personAutoController.js",
            "line": 1
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "editController.js",
            "line": 34,
            "description": "This section is concerned with obtaining the object from the backend and then bursting it onto the\nentire edit page appropriately.",
            "class": "personAutoController"
        },
        {
            "file": "editController.js",
            "line": 39,
            "description": "Technically done at the very start.",
            "class": "personAutoController"
        },
        {
            "file": "editController.js",
            "line": 96,
            "description": "Constructor...",
            "class": "personAutoController"
        },
        {
            "file": "editController.js",
            "line": 108,
            "description": "The final function that prepares the editPageModelObject to be sent to the backend.\nLoads any differences found into the editPageModelObject! :)",
            "class": "personAutoController"
        },
        {
            "file": "editController.js",
            "line": 159,
            "description": "SUEPRVISED POSTDOCS SECTION YES THIS IS A MESS HERE BUT IT MUST BE DONE FASTT!!!! AHHHHHHH!!!!!!!!!!!!!",
            "type": "{*[]}",
            "class": "personAutoController"
        },
        {
            "file": "editController.js",
            "line": 171,
            "description": "Object for SuperDoc",
            "params": [
                {
                    "name": "superDocNameOfPerson",
                    "description": ""
                },
                {
                    "name": "superDocStartYear",
                    "description": ""
                },
                {
                    "name": "superDocEndYear",
                    "description": ""
                },
                {
                    "name": "superDocInstitution",
                    "description": ""
                }
            ],
            "is_constructor": 1,
            "class": "personAutoController"
        },
        {
            "file": "editController.js",
            "line": 197,
            "description": "Initialize superDoc array as an empty array. Will hold SuperDoc objects :)!",
            "type": "{Array}",
            "class": "personAutoController"
        },
        {
            "file": "editController.js",
            "line": 224,
            "description": "SUPERDEGREE SECTION",
            "type": "{*[]}",
            "class": "personAutoController"
        },
        {
            "file": "editController.js",
            "line": 230,
            "description": "Super degree variables.",
            "type": "{boolean}",
            "class": "personAutoController"
        },
        {
            "file": "editController.js",
            "line": 248,
            "description": "Construct a super DEGREE object.",
            "params": [
                {
                    "name": "superDegNameOfPerson",
                    "description": ""
                },
                {
                    "name": "superDegCurrPosition",
                    "description": ""
                },
                {
                    "name": "superDegCurrInst",
                    "description": ""
                },
                {
                    "name": "superDegDegType",
                    "description": ""
                },
                {
                    "name": "superDegYear",
                    "description": ""
                },
                {
                    "name": "superDegInst",
                    "description": ""
                }
            ],
            "is_constructor": 1,
            "class": "personAutoController"
        },
        {
            "file": "editController.js",
            "line": 286,
            "description": "Initialize as an empty array, for now. Will be populated with SUPER DEGREE objects.",
            "type": "{Array}",
            "class": "personAutoController"
        },
        {
            "file": "editController.js",
            "line": 304,
            "description": "OTHER STUFFS",
            "type": "{*[]}",
            "class": "personAutoController"
        },
        {
            "file": "editController.js",
            "line": 326,
            "description": "This function will be how I retrieve the proper object from the backend, through the editService\nfile.",
            "class": "personAutoController"
        },
        {
            "file": "editController.js",
            "line": 333,
            "description": "Function called at the very start of this page's creation.\nResponsible for calling to the backend through the services to obtain the edit page object.",
            "class": "personAutoController"
        },
        {
            "file": "editController.js",
            "line": 346,
            "description": "Mock Object. This is what I will be expecting to recieve from the backend throughthe function\n\"obtainUserInformationFromBackEnd\".",
            "class": "personAutoController"
        },
        {
            "file": "editController.js",
            "line": 395,
            "class": "personAutoController"
        },
        {
            "file": "editController.js",
            "line": 397,
            "description": "This section deals with trivial information collection on the submit page such as first and last names.",
            "class": "personAutoController"
        },
        {
            "file": "editController.js",
            "line": 414,
            "description": "Simple function that I can invoke when I want to see what the contents of the basic inputs are.",
            "class": "personAutoController"
        },
        {
            "file": "editController.js",
            "line": 423,
            "description": "This function is evoked when the user decides to commit their edits to the page and send it off to\nthe backend of the server.\n\nPRIMARY GOAL: Create a brand new object (extremely similar to the submit page) of all of the inputs\nfrom the user on this page.\n\n\nSECONDARY GOAL: This second goal is to take the data that we already had given to us from\nthe backend and then to individually element-by-element in the objects check if there was any\ndifference in the edited object (made when this button is hit) and if there is then it is packed\ninto a new object that is a differences object which is sent to the backend.\n\nThe differences object will contain \"nulled\" (As a very weird string that likely will be unique in most\ncases?) if there were no changes in the data. This allows the specific items of concern to be\ndetermined by the backend relatively easily. If it is \"nulled\" then just move on, no changes.\n\nThis function makes use ot the editServices file to achieve this goal.",
            "class": "personAutoController"
        },
        {
            "file": "editController.js",
            "line": 559,
            "description": "This function will add a new tab to the set of tabs that we currently have.",
            "params": [
                {
                    "name": "pdYearStart",
                    "description": "The dates of the start of the postdoc appointment."
                },
                {
                    "name": "pdYearEnd",
                    "description": "The date of the end of the postdoc appointment."
                },
                {
                    "name": "pdSupervisor",
                    "description": "The supervisor of the postdoc appointment."
                },
                {
                    "name": "pdInstitution",
                    "description": "The institution of the postdoc appointment."
                }
            ],
            "class": "personAutoController"
        },
        {
            "file": "editController.js",
            "line": 573,
            "description": "This function when evoked will remove the selected tab from the screen.",
            "params": [
                {
                    "name": "tab",
                    "description": "The tab to be removed."
                }
            ],
            "class": "personAutoController"
        },
        {
            "file": "editController.js",
            "line": 590,
            "description": "This function when invoked will take the current and then the old tab and then it will combine\nthe data together in such a way that we have the previous now equal to the selected, and then\nindex into the \"tabs\" list with the current value.\n\n            $scope.$watch('degreeInfoSelectedIndex', function(current2, old2){\n               previous = selected;\n               selected = degreeInfoTab[current2];\n               if ( old2 + 1 && (old2 != current2)) $log.debug('Goodbye ' + previous.title + '!');\n               if ( current2 + 1 )                $log.debug('Hello ' + selected.title + '!');",
            "class": "personAutoController"
        },
        {
            "file": "editController.js",
            "line": 602,
            "description": "This function will add a new tab to the set of tabs that we currently have.",
            "params": [
                {
                    "name": "diYear",
                    "description": "The year that the degree was obtained."
                },
                {
                    "name": "diSupervisor",
                    "description": "The supervisor who oversaw the degree."
                },
                {
                    "name": "diInstitution",
                    "description": "The institution that awarded the degree."
                }
            ],
            "class": "personAutoController"
        },
        {
            "file": "editController.js",
            "line": 615,
            "description": "This function when evoked will remove the selected tab from the screen.",
            "params": [
                {
                    "name": "tab",
                    "description": "The tab to be removed."
                }
            ],
            "class": "personAutoController"
        },
        {
            "file": "editController.js",
            "line": 632,
            "description": "When invoked will show the postdoc info by setting the flag to true.",
            "class": "personAutoController"
        },
        {
            "file": "editController.js",
            "line": 640,
            "description": "When invoked will hide the postdoc info by setting the flag to false.",
            "class": "personAutoController"
        },
        {
            "file": "editController.js",
            "line": 648,
            "description": "Information regarding the postdoc appointments furnished on the submit page.",
            "class": "personAutoController"
        },
        {
            "file": "editController.js",
            "line": 668,
            "description": "Warnings made for the postdoc information empty fields warning to the users.",
            "class": "personAutoController"
        },
        {
            "file": "editController.js",
            "line": 680,
            "description": "Function evoked when the submit button is hit on the postdoc card on the submit page.\nCreates a new postDocInstance (object with postdoc data) with the data in the card's fields.\nAfterwards refreshes the view of the scope.",
            "params": [
                {
                    "name": "pdStartYear",
                    "description": "Starting year of the postdoc appointment."
                },
                {
                    "name": "pdEndYear",
                    "description": "Ending year of the postdoc appointment."
                },
                {
                    "name": "pdSupervisor",
                    "description": "Supervisor of the postdoc appointment."
                },
                {
                    "name": "pdInstitution",
                    "description": "Institution of the postdoc appointment."
                }
            ],
            "class": "personAutoController"
        },
        {
            "file": "editController.js",
            "line": 747,
            "description": "$scope.clearPostDocFields = function(){\n   pdStartYear = \"\";\n   pdEndYear = \"\";\n   pdSupervisor = \"\";\n   pdInstitution = \"\";\n   console.log(\"clearPostDocFields called! :)\");",
            "class": "personAutoController"
        },
        {
            "file": "editController.js",
            "line": 757,
            "description": "Function that when invoked will remove the selected postdoc instance from the submit page and\nthe particular individual's object model.",
            "params": [
                {
                    "name": "postDocInstanceIndex",
                    "description": "of the postDocInformation array that should be removed."
                }
            ],
            "class": "personAutoController"
        },
        {
            "file": "editController.js",
            "line": 776,
            "description": "This section deals with the cards associated with the degrees a user may have.",
            "class": "personAutoController"
        },
        {
            "file": "editController.js",
            "line": 786,
            "description": "Shows the degree info information when invoked.",
            "class": "personAutoController"
        },
        {
            "file": "editController.js",
            "line": 793,
            "description": "Hides the degree info information when invoked.",
            "class": "personAutoController"
        },
        {
            "file": "editController.js",
            "line": 802,
            "description": "Information regarding the postdoc appointments furnished on the submit page.",
            "class": "personAutoController"
        },
        {
            "file": "editController.js",
            "line": 812,
            "description": "Constructor for the DegreeInfoInstance Object.\nThis is the object that holds together the information of a single degree for a particular individual.",
            "params": [
                {
                    "name": "diYear",
                    "description": "Year of the degree being awarded."
                },
                {
                    "name": "diSupervisor",
                    "description": "Supervisor of the degree."
                },
                {
                    "name": "diInstitution",
                    "description": "Institution degree was awarded from."
                },
                {
                    "name": "diType",
                    "description": "Type of this degree."
                },
                {
                    "name": "diId",
                    "description": "id of degree."
                },
                {
                    "name": "supervisionId",
                    "description": "id of supervisor."
                }
            ],
            "is_constructor": 1,
            "class": "personAutoController"
        },
        {
            "file": "editController.js",
            "line": 839,
            "description": "Warnings for degree information fields being empty! :(",
            "class": "personAutoController"
        },
        {
            "file": "editController.js",
            "line": 848,
            "params": [
                {
                    "name": "diYear",
                    "description": "Year of the degree being awarded."
                },
                {
                    "name": "diSupervisor",
                    "description": "Supervisor of the degree."
                },
                {
                    "name": "diInstitution",
                    "description": "Institution degree was awarded from."
                },
                {
                    "name": "diType",
                    "description": "Type of this degree."
                },
                {
                    "name": "diId",
                    "description": "id of degree."
                },
                {
                    "name": "supervisionId",
                    "description": "id of supervisor."
                }
            ],
            "class": "personAutoController"
        },
        {
            "file": "editController.js",
            "line": 901,
            "description": "Removes the object passed in from the individual's degree information.",
            "params": [
                {
                    "name": "degreeInfoInstance",
                    "description": "The degree that is desired to be removed."
                }
            ],
            "class": "personAutoController"
        },
        {
            "file": "editController.js",
            "line": 927,
            "description": "This is the model for this submission page.\nFirst name, last name, title, degree type, current position title, current institution, postdoc info",
            "type": "{{usersFirstName: null, usersLastName: null, usersTitle: null, usersDegreeType: null, usersCurrentPositionTitle: null, usersCurrentInstitutionName: null, usersPostDocInfo: *[]}}",
            "class": "personAutoController"
        },
        {
            "file": "editController.js",
            "line": 935,
            "description": "This is the constructor for bundling all of the submission page information into one object.\nCalled by hitting the final submission button, which evokes a function that plops this together.\n\nParams are self explanitory I'd hope?",
            "params": [
                {
                    "name": "firstName",
                    "description": ""
                },
                {
                    "name": "lastName",
                    "description": ""
                },
                {
                    "name": "currentPositionTitle",
                    "description": ""
                },
                {
                    "name": "currentInstitutionName",
                    "description": ""
                },
                {
                    "name": "postDocInformation",
                    "description": ""
                }
            ],
            "class": "personAutoController"
        },
        {
            "file": "editController.js",
            "line": 1014,
            "description": "Warnings for the various input fields. Initially set to false.\nBut if the value is null then it is set to true and pops up a warning message.",
            "type": "{boolean}",
            "class": "personAutoController"
        },
        {
            "file": "editController.js",
            "line": 1030,
            "description": "Function evoked when the final submission button is hit, creates a new model object for the entire\nsubmission page.",
            "class": "personAutoController"
        },
        {
            "file": "editController.js",
            "line": 1119,
            "description": "Function that once it is called will dump all of the information of the object for this submission\npage!",
            "class": "personAutoController"
        },
        {
            "file": "personAutoController.js",
            "line": 11,
            "itemtype": "method",
            "name": "myFunction stuff and more stuff",
            "memberof": "personAutoController",
            "instance": "",
            "class": "personAutoController",
            "module": "personAutoController"
        },
        {
            "file": "searchController.js",
            "line": 99,
            "description": "My work",
            "class": "",
            "module": "personAutoController"
        },
        {
            "file": "submitController.js",
            "line": 1,
            "description": "Controller for the Submission page.\n\nStatus: CONTROLLER\nAssociated files: submit.html\n\nThe submission page is going to be the core of where the users will be able to supply information to begin a new\npage for a given particular user. This page is going to be essentially a massive collection of information that\nwe will be inserting into the system.\n\nThings that we're collecting include basic information like:\n-first name\n-last name\n-degree type\n-postdoc postings\n-etc",
            "class": "",
            "module": "personAutoController"
        },
        {
            "file": "submitController.js",
            "line": 53,
            "description": "SUEPRVISED POSTDOCS SECTION YES THIS IS A MESS HERE BUT IT MUST BE DONE FASTT!!!! AHHHHHHH!!!!!!!!!!!!!",
            "type": "{*[]}",
            "class": "",
            "module": "personAutoController"
        },
        {
            "file": "submitController.js",
            "line": 65,
            "description": "Object for SuperDoc",
            "params": [
                {
                    "name": "superDocNameOfPerson",
                    "description": ""
                },
                {
                    "name": "superDocStartYear",
                    "description": ""
                },
                {
                    "name": "superDocEndYear",
                    "description": ""
                },
                {
                    "name": "superDocInstitution",
                    "description": ""
                }
            ],
            "is_constructor": 1,
            "class": "",
            "module": "personAutoController"
        },
        {
            "file": "submitController.js",
            "line": 91,
            "description": "Initialize superDoc array as an empty array. Will hold SuperDoc objects :)!",
            "type": "{Array}",
            "class": "",
            "module": "personAutoController"
        },
        {
            "file": "submitController.js",
            "line": 118,
            "description": "SUPERDEGREE SECTION",
            "type": "{*[]}",
            "class": "",
            "module": "personAutoController"
        },
        {
            "file": "submitController.js",
            "line": 124,
            "description": "Super degree variables.",
            "type": "{boolean}",
            "class": "",
            "module": "personAutoController"
        },
        {
            "file": "submitController.js",
            "line": 136,
            "description": "Construct a super DEGREE object.",
            "params": [
                {
                    "name": "superDegNameOfPerson",
                    "description": ""
                },
                {
                    "name": "superDegStartYear",
                    "description": ""
                },
                {
                    "name": "superDegEndYear",
                    "description": ""
                },
                {
                    "name": "superDegInstitution",
                    "description": ""
                }
            ],
            "is_constructor": 1,
            "class": "",
            "module": "personAutoController"
        },
        {
            "file": "submitController.js",
            "line": 170,
            "description": "Initialize as an empty array, for now. Will be populated with SUPER DEGREE objects.",
            "type": "{Array}",
            "class": "",
            "module": "personAutoController"
        },
        {
            "file": "submitController.js",
            "line": 188,
            "description": "OTHER STUFFS",
            "type": "{*[]}",
            "class": "",
            "module": "personAutoController"
        },
        {
            "file": "submitController.js",
            "line": 204,
            "description": "This function when invoked will take the current and then the old tab and then it will combine\nthe data together in such a way that we have the previous now equal to the selected, and then\nindex into the \"tabs\" list with the current value.\n\n           $scope.$watch('selectedIndex', function(current, old){\n               previousPD = selectedPD;\n               selectedPD = postDocTab[current];\n               if ( old + 1 && (old != current)) $log.debug('Goodbye ' + previousPD.title + '!');\n               if ( current + 1 )                $log.debug('Hello ' + selectedPD.title + '!');\n           });",
            "class": "",
            "module": "personAutoController"
        },
        {
            "file": "submitController.js",
            "line": 217,
            "description": "This function will add a new tab to the set of tabs that we currently have.",
            "params": [
                {
                    "name": "pdYearStart",
                    "description": "The dates of the start of the postdoc appointment."
                },
                {
                    "name": "pdYearEnd",
                    "description": "The date of the end of the postdoc appointment."
                },
                {
                    "name": "pdSupervisor",
                    "description": "The supervisor of the postdoc appointment."
                },
                {
                    "name": "pdInstitution",
                    "description": "The institution of the postdoc appointment."
                }
            ],
            "class": "",
            "module": "personAutoController"
        },
        {
            "file": "submitController.js",
            "line": 231,
            "description": "This function when evoked will remove the selected tab from the screen.",
            "params": [
                {
                    "name": "tab",
                    "description": "The tab to be removed."
                }
            ],
            "class": "",
            "module": "personAutoController"
        },
        {
            "file": "submitController.js",
            "line": 248,
            "description": "This function when invoked will take the current and then the old tab and then it will combine\nthe data together in such a way that we have the previous now equal to the selected, and then\nindex into the \"tabs\" list with the current value.\n\n           $scope.$watch('degreeInfoSelectedIndex', function(current2, old2){\n               previous = selected;\n               selected = degreeInfoTab[current2];\n               if ( old2 + 1 && (old2 != current2)) $log.debug('Goodbye ' + previous.title + '!');\n               if ( current2 + 1 )                $log.debug('Hello ' + selected.title + '!');",
            "class": "",
            "module": "personAutoController"
        },
        {
            "file": "submitController.js",
            "line": 260,
            "description": "This function will add a new tab to the set of tabs that we currently have.",
            "params": [
                {
                    "name": "diYear",
                    "description": "The year that the degree was obtained."
                },
                {
                    "name": "diSupervisor",
                    "description": "The supervisor who oversaw the degree."
                },
                {
                    "name": "diInstitution",
                    "description": "The institution that awarded the degree."
                }
            ],
            "class": "",
            "module": "personAutoController"
        },
        {
            "file": "submitController.js",
            "line": 273,
            "description": "This function when evoked will remove the selected tab from the screen.",
            "params": [
                {
                    "name": "tab",
                    "description": "The tab to be removed."
                }
            ],
            "class": "",
            "module": "personAutoController"
        },
        {
            "file": "submitController.js",
            "line": 290,
            "description": "When invoked will show the postdoc info by setting the flag to true.",
            "class": "",
            "module": "personAutoController"
        },
        {
            "file": "submitController.js",
            "line": 298,
            "description": "When invoked will hide the postdoc info by setting the flag to false.",
            "class": "",
            "module": "personAutoController"
        },
        {
            "file": "submitController.js",
            "line": 306,
            "description": "Information regarding the postdoc appointments furnished on the submit page.",
            "class": "",
            "module": "personAutoController"
        },
        {
            "file": "submitController.js",
            "line": 338,
            "description": "Warnings made for the postdoc information empty fields warning to the users.",
            "class": "",
            "module": "personAutoController"
        },
        {
            "file": "submitController.js",
            "line": 347,
            "description": "Function evoked when the submit button is hit on the postdoc card on the submit page.\nCreates a new postDocInstance (object with postdoc data) with the data in the card's fields.\nAfterwards refreshes the view of the scope.",
            "params": [
                {
                    "name": "pdStartYear",
                    "description": "Starting year of the postdoc appointment."
                },
                {
                    "name": "pdEndYear",
                    "description": "Ending year of the postdoc appointment."
                },
                {
                    "name": "pdSupervisor",
                    "description": "Supervisor of the postdoc appointment."
                },
                {
                    "name": "pdInstitution",
                    "description": "Institution of the postdoc appointment."
                }
            ],
            "class": "",
            "module": "personAutoController"
        },
        {
            "file": "submitController.js",
            "line": 418,
            "description": "$scope.clearPostDocFields = function(){\n    pdStartYear = \"\";\n    pdEndYear = \"\";\n    pdSupervisor = \"\";\n    pdInstitution = \"\";\n    console.log(\"clearPostDocFields called! :)\");",
            "class": "",
            "module": "personAutoController"
        },
        {
            "file": "submitController.js",
            "line": 428,
            "description": "Function that when invoked will remove the selected postdoc instance from the submit page and\nthe particular individual's object model.",
            "params": [
                {
                    "name": "postDocInstanceIndex",
                    "description": "of the postDocInformation array that should be removed."
                }
            ],
            "class": "",
            "module": "personAutoController"
        },
        {
            "file": "submitController.js",
            "line": 447,
            "description": "This section deals with the cards associated with the degrees a user may have.",
            "class": "",
            "module": "personAutoController"
        },
        {
            "file": "submitController.js",
            "line": 465,
            "description": "Shows the degree info information when invoked.",
            "class": "",
            "module": "personAutoController"
        },
        {
            "file": "submitController.js",
            "line": 472,
            "description": "Hides the degree info information when invoked.",
            "class": "",
            "module": "personAutoController"
        },
        {
            "file": "submitController.js",
            "line": 481,
            "description": "Information regarding the postdoc appointments furnished on the submit page.",
            "class": "",
            "module": "personAutoController"
        },
        {
            "file": "submitController.js",
            "line": 491,
            "description": "Constructor for the DegreeInfoInstance Object.\nThis is the object that holds together the information of a single degree for a particular individual.",
            "params": [
                {
                    "name": "diYear",
                    "description": "Year of the degree being awarded."
                },
                {
                    "name": "diSupervisor",
                    "description": "Supervisor of the degree."
                },
                {
                    "name": "diInstitution",
                    "description": "Institution degree was awarded from."
                },
                {
                    "name": "diType",
                    "description": "Type of this degree."
                }
            ],
            "is_constructor": 1,
            "class": "",
            "module": "personAutoController"
        },
        {
            "file": "submitController.js",
            "line": 512,
            "description": "Warnings for degree information fields being empty! :(",
            "class": "",
            "module": "personAutoController"
        },
        {
            "file": "submitController.js",
            "line": 523,
            "params": [
                {
                    "name": "diYear",
                    "description": "Year of the degree being awarded."
                },
                {
                    "name": "diSupervisor",
                    "description": "Supervisor of the degree."
                },
                {
                    "name": "diInstitution",
                    "description": "Institution degree was awarded from."
                },
                {
                    "name": "diType",
                    "description": "Type of this degree."
                }
            ],
            "class": "",
            "module": "personAutoController"
        },
        {
            "file": "submitController.js",
            "line": 579,
            "description": "Removes the object passed in from the individual's degree information.",
            "params": [
                {
                    "name": "degreeInfoInstance",
                    "description": "The degree that is desired to be removed."
                }
            ],
            "class": "",
            "module": "personAutoController"
        },
        {
            "file": "submitController.js",
            "line": 599,
            "description": "This section deals with trivial information collection on the submit page such as first and last names.",
            "class": "",
            "module": "personAutoController"
        },
        {
            "file": "submitController.js",
            "line": 618,
            "description": "This is the model for this submission page.\nFirst name, last name, title, degree type, current position title, current institution, postdoc info",
            "type": "{{usersFirstName: null, usersLastName: null, usersTitle: null, usersDegreeType: null, usersCurrentPositionTitle: null, usersCurrentInstitutionName: null, usersPostDocInfo: *[]}}",
            "class": "",
            "module": "personAutoController"
        },
        {
            "file": "submitController.js",
            "line": 626,
            "description": "This is the constructor for bundling all of the submission page information into one object.\nCalled by hitting the final submission button, which evokes a function that plops this together.\n\nParams are self explanitory I'd hope?",
            "params": [
                {
                    "name": "firstName",
                    "description": ""
                },
                {
                    "name": "lastName",
                    "description": ""
                },
                {
                    "name": "individualTitle",
                    "description": ""
                },
                {
                    "name": "typeOfDegree",
                    "description": ""
                },
                {
                    "name": "currentPositionTitle",
                    "description": ""
                },
                {
                    "name": "currentInstitutionName",
                    "description": ""
                },
                {
                    "name": "postDocInformation",
                    "description": ""
                }
            ],
            "class": "",
            "module": "personAutoController"
        },
        {
            "file": "submitController.js",
            "line": 661,
            "description": "Warnings for the various input fields. Initially set to false.\nBut if the value is null then it is set to true and pops up a warning message.",
            "type": "{boolean}",
            "class": "",
            "module": "personAutoController"
        },
        {
            "file": "submitController.js",
            "line": 678,
            "description": "Function evoked when the final submission button is hit, creates a new model object for the entire\nsubmission page.",
            "class": "",
            "module": "personAutoController"
        },
        {
            "file": "submitController.js",
            "line": 764,
            "description": "Meant to return back to the main.search page, not working though.",
            "class": "",
            "module": "personAutoController"
        },
        {
            "file": "submitController.js",
            "line": 774,
            "description": "Function that once it is called will dump all of the information of the object for this submission\npage!",
            "class": "",
            "module": "personAutoController"
        },
        {
            "file": "userDialogController.js",
            "line": 1,
            "description": "Controller for the User Dialogue\n\nStatus: CONTROLLER\nAssociated files: userDialog.html,\n\nThe user dialog controller is associated with registration and submission of login information. So it is\nslightly associated with the User Controller (userController.js), yet is kept distinct for clarity of functions.",
            "class": "",
            "module": "personAutoController"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: function with method",
            "line": " personAutoController.js:11"
        },
        {
            "message": "unknown tag: memberof",
            "line": " personAutoController.js:11"
        },
        {
            "message": "unknown tag: instance",
            "line": " personAutoController.js:11"
        },
        {
            "message": "Missing item type\nThis section is concerned with obtaining the object from the backend and then bursting it onto the\nentire edit page appropriately.",
            "line": " editController.js:34"
        },
        {
            "message": "Missing item type\nTechnically done at the very start.",
            "line": " editController.js:39"
        },
        {
            "message": "Missing item type\nConstructor...",
            "line": " editController.js:96"
        },
        {
            "message": "Missing item type\nThe final function that prepares the editPageModelObject to be sent to the backend.\nLoads any differences found into the editPageModelObject! :)",
            "line": " editController.js:108"
        },
        {
            "message": "Missing item type\nSUEPRVISED POSTDOCS SECTION YES THIS IS A MESS HERE BUT IT MUST BE DONE FASTT!!!! AHHHHHHH!!!!!!!!!!!!!",
            "line": " editController.js:159"
        },
        {
            "message": "Missing item type\nObject for SuperDoc",
            "line": " editController.js:171"
        },
        {
            "message": "Missing item type\nInitialize superDoc array as an empty array. Will hold SuperDoc objects :)!",
            "line": " editController.js:197"
        },
        {
            "message": "Missing item type\nSUPERDEGREE SECTION",
            "line": " editController.js:224"
        },
        {
            "message": "Missing item type\nSuper degree variables.",
            "line": " editController.js:230"
        },
        {
            "message": "Missing item type\nConstruct a super DEGREE object.",
            "line": " editController.js:248"
        },
        {
            "message": "Missing item type\nInitialize as an empty array, for now. Will be populated with SUPER DEGREE objects.",
            "line": " editController.js:286"
        },
        {
            "message": "Missing item type\nOTHER STUFFS",
            "line": " editController.js:304"
        },
        {
            "message": "Missing item type\nThis function will be how I retrieve the proper object from the backend, through the editService\nfile.",
            "line": " editController.js:326"
        },
        {
            "message": "Missing item type\nFunction called at the very start of this page's creation.\nResponsible for calling to the backend through the services to obtain the edit page object.",
            "line": " editController.js:333"
        },
        {
            "message": "Missing item type\nMock Object. This is what I will be expecting to recieve from the backend throughthe function\n\"obtainUserInformationFromBackEnd\".",
            "line": " editController.js:346"
        },
        {
            "message": "Missing item type",
            "line": " editController.js:395"
        },
        {
            "message": "Missing item type\nThis section deals with trivial information collection on the submit page such as first and last names.",
            "line": " editController.js:397"
        },
        {
            "message": "Missing item type\nSimple function that I can invoke when I want to see what the contents of the basic inputs are.",
            "line": " editController.js:414"
        },
        {
            "message": "Missing item type\nThis function is evoked when the user decides to commit their edits to the page and send it off to\nthe backend of the server.\n\nPRIMARY GOAL: Create a brand new object (extremely similar to the submit page) of all of the inputs\nfrom the user on this page.\n\n\nSECONDARY GOAL: This second goal is to take the data that we already had given to us from\nthe backend and then to individually element-by-element in the objects check if there was any\ndifference in the edited object (made when this button is hit) and if there is then it is packed\ninto a new object that is a differences object which is sent to the backend.\n\nThe differences object will contain \"nulled\" (As a very weird string that likely will be unique in most\ncases?) if there were no changes in the data. This allows the specific items of concern to be\ndetermined by the backend relatively easily. If it is \"nulled\" then just move on, no changes.\n\nThis function makes use ot the editServices file to achieve this goal.",
            "line": " editController.js:423"
        },
        {
            "message": "Missing item type\nThis function will add a new tab to the set of tabs that we currently have.",
            "line": " editController.js:559"
        },
        {
            "message": "Missing item type\nThis function when evoked will remove the selected tab from the screen.",
            "line": " editController.js:573"
        },
        {
            "message": "Missing item type\nThis function when invoked will take the current and then the old tab and then it will combine\nthe data together in such a way that we have the previous now equal to the selected, and then\nindex into the \"tabs\" list with the current value.\n\n            $scope.$watch('degreeInfoSelectedIndex', function(current2, old2){\n               previous = selected;\n               selected = degreeInfoTab[current2];\n               if ( old2 + 1 && (old2 != current2)) $log.debug('Goodbye ' + previous.title + '!');\n               if ( current2 + 1 )                $log.debug('Hello ' + selected.title + '!');",
            "line": " editController.js:590"
        },
        {
            "message": "Missing item type\nThis function will add a new tab to the set of tabs that we currently have.",
            "line": " editController.js:602"
        },
        {
            "message": "Missing item type\nThis function when evoked will remove the selected tab from the screen.",
            "line": " editController.js:615"
        },
        {
            "message": "Missing item type\nWhen invoked will show the postdoc info by setting the flag to true.",
            "line": " editController.js:632"
        },
        {
            "message": "Missing item type\nWhen invoked will hide the postdoc info by setting the flag to false.",
            "line": " editController.js:640"
        },
        {
            "message": "Missing item type\nInformation regarding the postdoc appointments furnished on the submit page.",
            "line": " editController.js:648"
        },
        {
            "message": "Missing item type\nWarnings made for the postdoc information empty fields warning to the users.",
            "line": " editController.js:668"
        },
        {
            "message": "Missing item type\nFunction evoked when the submit button is hit on the postdoc card on the submit page.\nCreates a new postDocInstance (object with postdoc data) with the data in the card's fields.\nAfterwards refreshes the view of the scope.",
            "line": " editController.js:680"
        },
        {
            "message": "Missing item type\n$scope.clearPostDocFields = function(){\n   pdStartYear = \"\";\n   pdEndYear = \"\";\n   pdSupervisor = \"\";\n   pdInstitution = \"\";\n   console.log(\"clearPostDocFields called! :)\");",
            "line": " editController.js:747"
        },
        {
            "message": "Missing item type\nFunction that when invoked will remove the selected postdoc instance from the submit page and\nthe particular individual's object model.",
            "line": " editController.js:757"
        },
        {
            "message": "Missing item type\nThis section deals with the cards associated with the degrees a user may have.",
            "line": " editController.js:776"
        },
        {
            "message": "Missing item type\nShows the degree info information when invoked.",
            "line": " editController.js:786"
        },
        {
            "message": "Missing item type\nHides the degree info information when invoked.",
            "line": " editController.js:793"
        },
        {
            "message": "Missing item type\nInformation regarding the postdoc appointments furnished on the submit page.",
            "line": " editController.js:802"
        },
        {
            "message": "Missing item type\nConstructor for the DegreeInfoInstance Object.\nThis is the object that holds together the information of a single degree for a particular individual.",
            "line": " editController.js:812"
        },
        {
            "message": "Missing item type\nWarnings for degree information fields being empty! :(",
            "line": " editController.js:839"
        },
        {
            "message": "Missing item type",
            "line": " editController.js:848"
        },
        {
            "message": "Missing item type\nRemoves the object passed in from the individual's degree information.",
            "line": " editController.js:901"
        },
        {
            "message": "Missing item type\nThis is the model for this submission page.\nFirst name, last name, title, degree type, current position title, current institution, postdoc info",
            "line": " editController.js:927"
        },
        {
            "message": "Missing item type\nThis is the constructor for bundling all of the submission page information into one object.\nCalled by hitting the final submission button, which evokes a function that plops this together.\n\nParams are self explanitory I'd hope?",
            "line": " editController.js:935"
        },
        {
            "message": "Missing item type\nWarnings for the various input fields. Initially set to false.\nBut if the value is null then it is set to true and pops up a warning message.",
            "line": " editController.js:1014"
        },
        {
            "message": "Missing item type\nFunction evoked when the final submission button is hit, creates a new model object for the entire\nsubmission page.",
            "line": " editController.js:1030"
        },
        {
            "message": "Missing item type\nFunction that once it is called will dump all of the information of the object for this submission\npage!",
            "line": " editController.js:1119"
        },
        {
            "message": "Missing item type\nMy work",
            "line": " searchController.js:99"
        },
        {
            "message": "Missing item type\nController for the Submission page.\n\nStatus: CONTROLLER\nAssociated files: submit.html\n\nThe submission page is going to be the core of where the users will be able to supply information to begin a new\npage for a given particular user. This page is going to be essentially a massive collection of information that\nwe will be inserting into the system.\n\nThings that we're collecting include basic information like:\n-first name\n-last name\n-degree type\n-postdoc postings\n-etc",
            "line": " submitController.js:1"
        },
        {
            "message": "Missing item type\nSUEPRVISED POSTDOCS SECTION YES THIS IS A MESS HERE BUT IT MUST BE DONE FASTT!!!! AHHHHHHH!!!!!!!!!!!!!",
            "line": " submitController.js:53"
        },
        {
            "message": "Missing item type\nObject for SuperDoc",
            "line": " submitController.js:65"
        },
        {
            "message": "Missing item type\nInitialize superDoc array as an empty array. Will hold SuperDoc objects :)!",
            "line": " submitController.js:91"
        },
        {
            "message": "Missing item type\nSUPERDEGREE SECTION",
            "line": " submitController.js:118"
        },
        {
            "message": "Missing item type\nSuper degree variables.",
            "line": " submitController.js:124"
        },
        {
            "message": "Missing item type\nConstruct a super DEGREE object.",
            "line": " submitController.js:136"
        },
        {
            "message": "Missing item type\nInitialize as an empty array, for now. Will be populated with SUPER DEGREE objects.",
            "line": " submitController.js:170"
        },
        {
            "message": "Missing item type\nOTHER STUFFS",
            "line": " submitController.js:188"
        },
        {
            "message": "Missing item type\nThis function when invoked will take the current and then the old tab and then it will combine\nthe data together in such a way that we have the previous now equal to the selected, and then\nindex into the \"tabs\" list with the current value.\n\n           $scope.$watch('selectedIndex', function(current, old){\n               previousPD = selectedPD;\n               selectedPD = postDocTab[current];\n               if ( old + 1 && (old != current)) $log.debug('Goodbye ' + previousPD.title + '!');\n               if ( current + 1 )                $log.debug('Hello ' + selectedPD.title + '!');\n           });",
            "line": " submitController.js:204"
        },
        {
            "message": "Missing item type\nThis function will add a new tab to the set of tabs that we currently have.",
            "line": " submitController.js:217"
        },
        {
            "message": "Missing item type\nThis function when evoked will remove the selected tab from the screen.",
            "line": " submitController.js:231"
        },
        {
            "message": "Missing item type\nThis function when invoked will take the current and then the old tab and then it will combine\nthe data together in such a way that we have the previous now equal to the selected, and then\nindex into the \"tabs\" list with the current value.\n\n           $scope.$watch('degreeInfoSelectedIndex', function(current2, old2){\n               previous = selected;\n               selected = degreeInfoTab[current2];\n               if ( old2 + 1 && (old2 != current2)) $log.debug('Goodbye ' + previous.title + '!');\n               if ( current2 + 1 )                $log.debug('Hello ' + selected.title + '!');",
            "line": " submitController.js:248"
        },
        {
            "message": "Missing item type\nThis function will add a new tab to the set of tabs that we currently have.",
            "line": " submitController.js:260"
        },
        {
            "message": "Missing item type\nThis function when evoked will remove the selected tab from the screen.",
            "line": " submitController.js:273"
        },
        {
            "message": "Missing item type\nWhen invoked will show the postdoc info by setting the flag to true.",
            "line": " submitController.js:290"
        },
        {
            "message": "Missing item type\nWhen invoked will hide the postdoc info by setting the flag to false.",
            "line": " submitController.js:298"
        },
        {
            "message": "Missing item type\nInformation regarding the postdoc appointments furnished on the submit page.",
            "line": " submitController.js:306"
        },
        {
            "message": "Missing item type\nWarnings made for the postdoc information empty fields warning to the users.",
            "line": " submitController.js:338"
        },
        {
            "message": "Missing item type\nFunction evoked when the submit button is hit on the postdoc card on the submit page.\nCreates a new postDocInstance (object with postdoc data) with the data in the card's fields.\nAfterwards refreshes the view of the scope.",
            "line": " submitController.js:347"
        },
        {
            "message": "Missing item type\n$scope.clearPostDocFields = function(){\n    pdStartYear = \"\";\n    pdEndYear = \"\";\n    pdSupervisor = \"\";\n    pdInstitution = \"\";\n    console.log(\"clearPostDocFields called! :)\");",
            "line": " submitController.js:418"
        },
        {
            "message": "Missing item type\nFunction that when invoked will remove the selected postdoc instance from the submit page and\nthe particular individual's object model.",
            "line": " submitController.js:428"
        },
        {
            "message": "Missing item type\nThis section deals with the cards associated with the degrees a user may have.",
            "line": " submitController.js:447"
        },
        {
            "message": "Missing item type\nShows the degree info information when invoked.",
            "line": " submitController.js:465"
        },
        {
            "message": "Missing item type\nHides the degree info information when invoked.",
            "line": " submitController.js:472"
        },
        {
            "message": "Missing item type\nInformation regarding the postdoc appointments furnished on the submit page.",
            "line": " submitController.js:481"
        },
        {
            "message": "Missing item type\nConstructor for the DegreeInfoInstance Object.\nThis is the object that holds together the information of a single degree for a particular individual.",
            "line": " submitController.js:491"
        },
        {
            "message": "Missing item type\nWarnings for degree information fields being empty! :(",
            "line": " submitController.js:512"
        },
        {
            "message": "Missing item type",
            "line": " submitController.js:523"
        },
        {
            "message": "Missing item type\nRemoves the object passed in from the individual's degree information.",
            "line": " submitController.js:579"
        },
        {
            "message": "Missing item type\nThis section deals with trivial information collection on the submit page such as first and last names.",
            "line": " submitController.js:599"
        },
        {
            "message": "Missing item type\nThis is the model for this submission page.\nFirst name, last name, title, degree type, current position title, current institution, postdoc info",
            "line": " submitController.js:618"
        },
        {
            "message": "Missing item type\nThis is the constructor for bundling all of the submission page information into one object.\nCalled by hitting the final submission button, which evokes a function that plops this together.\n\nParams are self explanitory I'd hope?",
            "line": " submitController.js:626"
        },
        {
            "message": "Missing item type\nWarnings for the various input fields. Initially set to false.\nBut if the value is null then it is set to true and pops up a warning message.",
            "line": " submitController.js:661"
        },
        {
            "message": "Missing item type\nFunction evoked when the final submission button is hit, creates a new model object for the entire\nsubmission page.",
            "line": " submitController.js:678"
        },
        {
            "message": "Missing item type\nMeant to return back to the main.search page, not working though.",
            "line": " submitController.js:764"
        },
        {
            "message": "Missing item type\nFunction that once it is called will dump all of the information of the object for this submission\npage!",
            "line": " submitController.js:774"
        },
        {
            "message": "Missing item type\nController for the User Dialogue\n\nStatus: CONTROLLER\nAssociated files: userDialog.html,\n\nThe user dialog controller is associated with registration and submission of login information. So it is\nslightly associated with the User Controller (userController.js), yet is kept distinct for clarity of functions.",
            "line": " userDialogController.js:1"
        }
    ]
}